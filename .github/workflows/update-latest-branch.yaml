name: Update `latest` branch

on:
  workflow_call:
    inputs:
      current_branch:
        type: string
        required: true

jobs:
  update-latest-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Update latest branch
        id: update-latest-branch
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        env:
          CURRENT_BRANCH: ${{ inputs.current_branch }}
        with:
          script: |
            const { CURRENT_BRANCH: currentBranch } = process.env;

            // Get all branches
            const branches = await github.paginate(github.rest.repos.listBranches, context.repo);

            const tryUpdateBranch = async (to, from) => {
              if (currentBranch != to) {
                console.log(`Skipping branch "${to}" since it is not the current branch (${currentBranch})`);
                return;
              }

              const ref = await github.rest.git.getRef({ ...context.repo, ref: `heads/${to}` });
              const sha = ref.data.object.sha;

              // TODO: Do the actual update
              if (branches.some((b) => b.name == from)) {
                console.log(`Updating branch "${from}" to point to branch "${to}", SHA ${sha}`);
              } else {
                console.log(`Creating branch "${from}" to point to branch "${to}", SHA ${sha}`);
              }
            };

            // Update the `latest` branch
            const latestBranch = branches.reduce((prev, v) => {
              const match = /^branch-([0-9]+)\.([0-9]+)$/.exec(v.name);
              if (!match) {
                return prev;
              }
              const next = {
                major: parseInt(match[1]),
                minor: parseInt(match[2]),
                name: v.name,
              };
              if (!prev) {
                return next;
              }
              if (next.major > prev.major) {
                return next;
              }
              if (next.major < prev.major) {
                return prev;
              }
              if (next.minor > prev.minor) {
                return next;
              }
              return prev;
            }, null).name;
            await tryUpdateBranch(latestBranch, "latest");

            // Update the `default` branch
            const defaultBranch = (await github.rest.repos.get(context.repo)).data.default_branch;
            await tryUpdateBranch(defaultBranch, "default");
