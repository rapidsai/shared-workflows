name: Update `latest` branch

on:
  workflow_call:
    inputs:
      branch:
        type: string
        required: true
      dry_run:
        type: boolean
        required: false
        default: false

jobs:
  update-latest-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Update latest branch
        id: update-latest-branch
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        env:
          BRANCH: ${{ inputs.branch }}
          DRY_RUN: ${{ inputs.dry_run }}
        with:
          script: |
            const { BRANCH: currentBranch, DRY_RUN: dryRunStr } = process.env;
            const dryRun = dryRunStr == "true";

            // Get all branches
            const branches = await github.paginate(github.rest.repos.listBranches, context.repo);

            const tryUpdateBranch = async (to, from) => {
              if (currentBranch != to) {
                if (dryRun) {
                  console.log(`Would have skipped branch "${to}" since it is not the current branch ("${currentBranch}")`);
                } else {
                  console.log(`Skipping branch "${to}" since it is not the current branch ("${currentBranch}")`);
                }
                return;
              }

              const ref = await github.rest.git.getRef({ ...context.repo, ref: `heads/${to}` });
              const sha = ref.data.object.sha;

              if (branches.some((b) => b.name == from)) {
                if (dryRun) {
                  console.log(`Would have updated branch "${from}" to point to branch "${to}", SHA ${sha}`);
                } else {
                  console.log(`Updating branch "${from}" to point to branch "${to}", SHA ${sha}`);
                  await github.rest.git.updateRef({ ...context.repo, ref: `heads/${from}`, sha, force: true });
                }
              } else {
                if (dryRun) {
                  console.log(`Would have created branch "${from}" to point to branch "${to}", SHA ${sha}`);
                } else {
                  console.log(`Creating branch "${from}" to point to branch "${to}", SHA ${sha}`);
                  await github.rest.git.createRef({ ...context.repo, ref: `refs/heads/${from}`, sha });
                }
              }
            };

            // Update the `latest` branch
            const latestBranch = branches.reduce((prev, v) => {
              const match = /^branch-([0-9]+)\.([0-9]+)$/.exec(v.name);
              if (!match) {
                return prev;
              }
              const next = {
                major: parseInt(match[1]),
                minor: parseInt(match[2]),
                name: v.name,
              };
              if (!prev) {
                return next;
              }
              if (next.major > prev.major) {
                return next;
              }
              if (next.major < prev.major) {
                return prev;
              }
              if (next.minor > prev.minor) {
                return next;
              }
              return prev;
            }, null).name;
            await tryUpdateBranch(latestBranch, "latest");

            // Update the `default` branch
            const defaultBranch = (await github.rest.repos.get(context.repo)).data.default_branch;
            await tryUpdateBranch(defaultBranch, "default");
