on:
  workflow_call:
    inputs:
      sha:
        type: string
      arch:
        type: string
        default: '["amd64"]'
      cuda:
        type: string
        default: '["12.0"]'
      python_package_manager:
        type: string
        default: '["conda", "pip"]'
      repo:
        type: string
      node_type:
        type: string
        default: "cpu8"
      build_command:
        type: string
        required: true
      # Note that this is the _name_ of a secret containing the key, not the key itself.
      extra-repo-deploy-key:
        required: false
        type: string
        default: ''
      # Note that this is the _name_ of a secret containing the key, not the key itself.
      extra-repo-deploy-key-2:
        required: false
        type: string
        default: ''
    # the use of secrets in shared-workflows is discouraged, especially for public repositories.
    # these values were added for situations where the use of secrets is unavoidable.
    secrets:
      RAPIDS_AUX_SECRET_1:
        required: false

permissions:
  actions: read
  checks: none
  contents: read
  deployments: none
  discussions: none
  id-token: write
  issues: none
  packages: read
  pages: none
  pull-requests: read
  repository-projects: none
  security-events: none
  statuses: none

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        ARCH: ${{ fromJSON(inputs.arch) }}
        CUDA_VER: ${{ fromJSON(inputs.cuda) }}
        PACKAGER: ${{ fromJSON(inputs.python_package_manager) }}
    runs-on: "linux-${{ matrix.ARCH }}-${{ inputs.node_type }}"
    name: "${{ matrix.ARCH }}, ${{ matrix.CUDA_VER }}, ${{ matrix.PACKAGER }}"
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.sha }}
          fetch-depth: 0

      # This provides an initial set of metadata tags. Jobs are free to add to the RAPIDS_JOB_ATTRIBUTES
      # environment variable as they see fit - but remember to export the variable to ${GITHUB_ENV}
      - name: Telemetry setup
        uses: rapidsai/shared-actions/telemetry-dispatch-setup@main
        continue-on-error: true
        if: ${{ vars.TELEMETRY_ENABLED == 'true' && github.run_attempt == '1' }}
        with:
            extra_attributes: "rapids.PACKAGER=${{ matrix.PACKAGER }},rapids.CUDA_VER=${{ matrix.CUDA_VER }},rapids.ARCH=${{ matrix.ARCH }}"

      - name: Check if repo has devcontainer
        run: |
          echo "REPOSITORY=$(basename $(pwd))" | tee -a "${GITHUB_ENV}";
          if test -f .devcontainer/cuda${{ matrix.CUDA_VER }}-${{ matrix.PACKAGER }}/devcontainer.json; then
            echo "HAS_DEVCONTAINER=true" >> "${GITHUB_ENV}";
          else
            echo "HAS_DEVCONTAINER=false" >> "${GITHUB_ENV}";
          fi
      - if: ${{ env.HAS_DEVCONTAINER == 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-duration-seconds: 43200 # 12h
      - if: ${{ env.HAS_DEVCONTAINER == 'true' }}
        name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'

      - name: Setup proxy cache
        uses: nv-gha-runners/setup-proxy-cache@main
        continue-on-error: true

      - if: ${{ env.HAS_DEVCONTAINER == 'true' }}
        name: Run build in devcontainer
        uses: devcontainers/ci@v0.3
        with:
          push: never
          configFile: .devcontainer/cuda${{ matrix.CUDA_VER }}-${{ matrix.PACKAGER }}/devcontainer.json
          # Env vars are NOT automatically passed from our current env into the devcontainer.
          # We have to pass them in explicitly.
          env: |
            REPOSITORY=${{ env.REPOSITORY }}
            SCCACHE_REGION=${{ vars.AWS_REGION }}
            AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }}
            AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}
            AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }}
            RAPIDS_AUX_SECRET_1=${{ secrets.RAPIDS_AUX_SECRET_1 }}
            TRACEPARENT=${{ env.TRACEPARENT }}
            OTEL_SERVICE_NAME=${{ env.OTEL_SERVICE_NAME }}
            OTEL_EXPORTER_OTLP_ENDPOINT=${{ env.OTEL_EXPORTER_OTLP_ENDPOINT }}
            OTEL_EXPORTER_OTLP_PROTOCOL=${{ env.OTEL_EXPORTER_OTLP_PROTOCOL }}
            OTEL_RESOURCE_ATTRIBUTES=${{ env.OTEL_RESOURCE_ATTRIBUTES }}
          runCmd: |
            set -e;
            mkdir -p ~/.config/pip/;
            cat <<EOF >> ~/.config/pip/pip.conf
            [global]
            extra-index-url = https://pypi.anaconda.org/rapidsai-wheels-nightly/simple
            EOF

            rapids-make-${PYTHON_PACKAGE_MANAGER}-env;

            if test -n '${{ inputs.extra-repo-deploy-key }}' \
            || test -n '${{ inputs.extra-repo-deploy-key-2 }}'; then
              if ! pgrep ssh-agent >/dev/null 2>&1; then eval "$(ssh-agent -s)"; fi;
              if test -n '${{ inputs.extra-repo-deploy-key }}'; then
                ssh-add - <<< '${{ secrets[inputs.extra-repo-deploy-key] }}';
              fi
              if test -n '${{ inputs.extra-repo-deploy-key-2 }}'; then
                ssh-add - <<< '${{ secrets[inputs.extra-repo-deploy-key-2] }}';
              fi
              devcontainer-utils-init-ssh-deploy-keys || true;
            fi

            cd ~/"${REPOSITORY}";
            ${{ inputs.build_command }}
      - name: Telemetry upload attributes
        uses: rapidsai/shared-actions/telemetry-dispatch-stash-job-artifacts@main
        continue-on-error: true
        if: ${{ vars.TELEMETRY_ENABLED == 'true' && github.run_attempt == '1' }}
