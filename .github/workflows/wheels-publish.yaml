name: Publish RAPIDS wheels

on:
  workflow_call:
    inputs:
      branch:
        description: |
          Git branch the workflow run targets.
          This is required even when 'sha' is provided because it is also used for organizing artifacts.
        type: string
      date:
        description: "Date (YYYY-MM-DD) this run is for. Used to organize artifacts produced by nightly builds"
        type: string
      sha:
        description: "Full git commit SHA to check out"
        type: string
      repo:
        description: "Git repo to check out, in '{org}/{repo}' form, e.g. 'rapidsai/cudf'"
        type: string
      build_type:
        description: "One of: [branch, nightly, pull-request]"
        required: true
        type: string

      # general settings
      package-name:
        description: |
          Distribution name, without any other qualifiers (e.g. 'pylibcudf', not 'pylibcudf-cu12-cp311-manylinux_2_24_aarch64')
        required: true
        type: string
      package-type:
        description: "One of: [cpp, python]"
        required: false
        default: python
        type: string
      publish_to_pypi:
        description: "If true, the wheel will be published to pypi.org"
        type: boolean
        default: false

permissions:
  actions: read
  checks: none
  contents: read
  deployments: none
  discussions: none
  id-token: write
  issues: none
  packages: read
  pages: none
  pull-requests: read
  repository-projects: none
  security-events: none
  statuses: none

jobs:
  wheel-publish:
    name: wheels publish
    # Use a self-hosted runner to ensure we have sufficient disk space. Using
    # cpu8 since we shouldn't need much CPU horsepower.
    runs-on: "linux-amd64-cpu8"
    container:
      # CUDA toolkit version of the container is irrelevant in the publish step.
      # This just uploads already-built wheels to remote storage.
      image: "rapidsai/ci-wheel:25.10-latest" # zizmor: ignore[unpinned-images]
      env:
        RAPIDS_BUILD_TYPE: ${{ inputs.build_type }}
    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - name: checkout code repo
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repo }}
        ref: ${{ inputs.sha }}
        fetch-depth: 0 # unshallow fetch for setuptools-scm
        persist-credentials: false

    - name: Telemetry setup
      uses: rapidsai/shared-actions/telemetry-dispatch-setup@main
      continue-on-error: true
      if: ${{ vars.TELEMETRY_ENABLED == 'true' }}
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Standardize repository information
      uses: rapidsai/shared-actions/rapids-github-info@main
      with:
        repo: ${{ inputs.repo }}
        branch: ${{ inputs.branch }}
        date: ${{ inputs.date }}
        sha: ${{ inputs.sha }}

    # Per the docs at https://docs.github.com/en/rest/rate-limit/rate-limit?apiVersion=2022-11-28#get-rate-limit-status-for-the-authenticated-user,
    # checking '/rate_limit | jq .' should not itself count against any rate limits.
    - name: Check GitHub API rate limits
      run: |
        if ! type gh >/dev/null; then
            echo "'gh' CLI is not installed... skipping rate-limits check"
        else
            gh api /rate_limit | jq .
        fi
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Download wheels from artifact storage and publish to anaconda repository
      run: rapids-wheels-anaconda-github "${INPUTS_PACKAGE_NAME}" "${INPUTS_PACKAGE_TYPE}"
      env:
        GH_TOKEN: ${{ github.token }}
        RAPIDS_CONDA_TOKEN: ${{ secrets.CONDA_RAPIDSAI_WHEELS_NIGHTLY_TOKEN }}
        PACKAGENAME: ${{ inputs.package-name }}
        PACKAGETYPE: ${{ inputs.package-type }}
        INPUTS_PACKAGE_NAME: ${{ inputs.package-name }}
        INPUTS_PACKAGE_TYPE: ${{ inputs.package-type }}

    - name: Check if build is release
      id: check_if_release
      shell: bash
      if: ${{ inputs.publish_to_pypi }}
      run: |
        if rapids-is-release-build; then
          echo "is_release_build=true" | tee -a "${GITHUB_OUTPUT}"
        else
          echo "is_release_build=false" | tee -a "${GITHUB_OUTPUT}"
        fi

    - name: Publish the downloaded wheels to PyPI
      if: ${{ inputs.publish_to_pypi && steps.check_if_release.outputs.is_release_build == 'true' }}
      run: |
        python3 -m pip install twine
        python3 -m twine upload -u __token__ dist/*
      env:
        TWINE_PASSWORD: ${{ secrets.RAPIDSAI_PYPI_TOKEN }}
    - name: Telemetry upload attributes
      uses: rapidsai/shared-actions/telemetry-dispatch-stash-job-artifacts@main
      continue-on-error: true
      if: ${{ vars.TELEMETRY_ENABLED == 'true' }}
      env:
        GH_TOKEN: ${{ github.token }}
